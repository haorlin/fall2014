// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.

// Comments that start with "//" are intended to be removed from your
// solutions.
package jump61;

import java.util.ArrayList;
import java.util.Hashtable;

/** An automated Player.
 *  @author Hao Ran Raymond Lin
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        // FIXME
        MutableBoard tempBoard = new MutableBoard(getBoard());

        ArrayList<Integer> startingMoves = new ArrayList<Integer>();
        for (int i = 0; i < tempBoard.size() * tempBoard.size(); i++) {
            if (tempBoard.isLegal(tempBoard.whoseMove(), i)) {
                startingMoves.add(i);
            }
        }

        int moveToMake = minmax(tempBoard.whoseMove(), tempBoard, 3,
                startingMoves);
        getGame().reportMove(getBoard().whoseMove(),
                getBoard().row(moveToMake), getBoard().col(moveToMake));
        getGame().makeMove(moveToMake);

    }

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, ArrayList<Integer> moves) {
        // REPLACE WITH SOLUTION
        int biggestValue = -9999;
        Hashtable<Integer, Integer> hValues = new Hashtable<Integer, Integer>();
        if (d > 0) {
            ArrayList<Integer> bestMoves = new ArrayList<Integer>();
            for (int i = 0; i < moves.size(); i++) {
                if (moveAvailable(p, b, moves.get(i))) {
                    b.addSpot(p, i);
                    int thisValue = staticEval(p, b);
                    //System.out.println(thisValue);
                    if (thisValue > biggestValue) {
                        biggestValue = thisValue;
                    }
                    hValues.put(moves.get(i), thisValue);
                    b.undo();
                }
            }
            for (int i = 0; i < moves.size(); i++) {
                if (hValues.get(moves.get(i)) >= biggestValue) {
                    //System.out.println(moves.get(i) + "@@@@@@@" + hValues.get(moves.get(i)));
                    bestMoves.add(moves.get(i));
                }
            }
            chooseBestMove(p, b, d - 1, bestMoves);
        }
        return moves.get((int)(Math.random() * moves.size()));
    }
    
    public void chooseBestMove(Side p, Board b, int d, ArrayList<Integer> moves) {
        for (int i = 0; i < moves.size(); i++) {
            b.addSpot(p, moves.get(i));
            minmax(p, b, d, moves);
            b.undo();
        }
    }

    public boolean moveAvailable(Side p, Board b, int n) {
        if (b.isLegal(p, n)) {
            return true;
        }
        return false;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    private int staticEval(Side p, Board b) {
        // REPLACE WITH SOLUTION
        int points = 0;
        //int cornersControlled;
        points += (b.numOfSide(p) - b.numOfSide(p.opposite()));
        if (b.get(0).getSide() == p) {
            points += 10;
        }
        if (b.get(b.size() - 1).getSide() == p) {
            points += 10;
        }
        if (b.get(b.size() * b.size() - 1).getSide() == p) {
            points += 10;
        }
        if (b.get(b.size() * (b.size() - 1)).getSide() == p) {
            points += 10;
        }
        if (b.numOfSide(p) == b.size() * b.size()) {
            points += 100;
        }
        if (b.numOfSide(p.opposite()) == b.size() * b.size()) {
            points -= 100;
        }
        return points;
    }

}
