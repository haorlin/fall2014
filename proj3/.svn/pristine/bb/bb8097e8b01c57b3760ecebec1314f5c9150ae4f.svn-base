package graph;

/* See restrictions in Graph.java. */

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author Hao Ran Raymond Lin
 */
public abstract class ShortestPaths {
    /**
     * A comparator that compares the weight of two vertices based on their
     * weight and estimated distance to the destination.
     * @author raymondlin
     */
    private class WeightComparator implements Comparator<Integer> {

        @Override
        public int compare(Integer v1, Integer v2) {
            Double v1Value = getWeight(v1)
                    + estimatedDistance(v1);
            Double v2Value = getWeight(v2)
                    + estimatedDistance(v2);

            if (v1Value > v2Value) {
                return 1;
            } else if (v1Value < v2Value) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        availableNodes = new PriorityQueue<Integer>(_G.vertexSize(),
                new WeightComparator());
        for (int i = 1; i <= _G.maxVertex(); i++) {
            if (_G.contains(i)) {
                setWeight(i, Double.POSITIVE_INFINITY);
                setPredecessor(i, -1);
                availableNodes.add(i);
            }
        }
        availableNodes.remove(getSource());
        setWeight(getSource(), 0.0);
        availableNodes.add(getSource());
        while (!availableNodes.isEmpty()) {
            int thisNode = availableNodes.poll();
            if (thisNode == getDest()) {
                break;
            }
            for (int vertex : _G.successors(thisNode)) {
                if (getWeight(thisNode) + getWeight(thisNode, vertex)
                        < getWeight(vertex)) {
                    availableNodes.remove(vertex);
                    setWeight(vertex,
                            getWeight(thisNode) + getWeight(thisNode, vertex));
                    setPredecessor(vertex, thisNode);
                    availableNodes.add(vertex);
                }
            }
        }
    }

    /** Returns the starting vertex. */
    public int getSource() {
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {

        List<Integer> pathToV = new ArrayList<Integer>();
        Stack<Integer> finalVertices = new Stack<Integer>();
        int nodeToAdd = v;
        while (nodeToAdd != getSource()) {
            finalVertices.push(nodeToAdd);
            nodeToAdd = getPredecessor(nodeToAdd);
        }
        finalVertices.add(getSource());
        while (!finalVertices.isEmpty()) {
            pathToV.add(finalVertices.pop());
        }
        return pathToV;
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    /**
     * The fringe that stores vertices with priority to the one with the
     * smallest weight and estimated distance to destination.
     */
    private PriorityQueue<Integer> availableNodes;
}
