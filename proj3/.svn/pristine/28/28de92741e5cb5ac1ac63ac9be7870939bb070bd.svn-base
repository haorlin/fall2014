package graph;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import static org.junit.Assert.*;

/** Unit tests for the ShortestPath class.
 *  @author Hao Ran Raymond Lin
 */
public class PathsTesting {
    class TestGraphPaths extends SimpleShortestPaths {
        
        public TestGraphPaths(LabeledGraph<Integer, Double> G, int source, int dest) {
            super(G, source, dest);
            _G = G;
        }
        
        @Override
        public double getWeight(int u, int v) {
            if (!_G.contains(u, v)) {
                return Double.POSITIVE_INFINITY;
            }
            return _G.getLabel(u, v);
        }
        
        @Override
        protected double estimatedDistance(int v) {
            heuristicUsed = true;
            if (v == 4) {
                return 102.0;
            } else if (v == 2) {
                return 4.0;
            } else if (v == 5) {
                return 5.1;
            } else if (v == 6) {
                return 40.0;
            } else {
                return 0;
            }   
        }
        private LabeledGraph<Integer, Double> _G;
        private boolean heuristicUsed = false;
    }
    
    @Test
    public void testShortestPath() {
        LabeledGraph<Integer, Double> g = new LabeledGraph<Integer, Double>(new DirectedGraph());
        TestGraphPaths p = new TestGraphPaths(g, 4, 3);
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.add();
        g.remove(1);

        g.add(5, 6, 30.0);
        g.add(4, 5, 11.2);
        g.add(4, 2, 12.2);
        g.add(2, 3, 6.5);
        g.add(5, 3, 9.1);
        g.add(4, 3, 102.0);
        g.add(6, 7, 999.9);
        
        assertEquals(4, p.getSource());
        assertEquals(3, p.getDest());
       
        assertEquals(Double.POSITIVE_INFINITY, p.getWeight(7), 0);
        
        Integer[] correctShortestArray = {4, 2, 3};
        List<Integer> correctShortestPath = Arrays.asList(correctShortestArray);
        p.setPaths();
        List<Integer> shortestPath = p.pathTo();
        assertEquals(12.2, p.getWeight(2), 0.1);
        assertEquals(0, p.getPredecessor(7));
        assertEquals(18.7, p.getWeight(3), 0.1);
        assertEquals(5, p.getPredecessor(6));
   
        if (p.heuristicUsed) {
            assertEquals(0, p.getPredecessor(7));
        } else {
            assertEquals(6 ,p.getPredecessor(7));
        }
        assertTrue(shortestPath.equals(correctShortestPath));
    }
    
}
