// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.

// Comments that start with "//" are intended to be removed from your
// solutions.
package jump61;
import static jump61.Side.*;
import static jump61.Square.square;
import java.util.Stack;

/** A Jump61 board state that may be modified.
 *  @author Hao Ran Raymond Lin
 */
class MutableBoard extends Board {

    /** An N x N board in initial configuration. */
    MutableBoard(int N) {
        // FIXME
        _grid = new Square[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                _grid[i][j] = Square.INITIAL;
            }
        }
        _length = N;
        numRed = 0;
        numBlue = 0;
        numWhite = N * N;
        numPieces = N * N;
    }

    /** A board whose initial contents are copied from BOARD0, but whose
     *  undo history is clear. */
    MutableBoard(Board board0) {
        // FIXME
        for (int i = 0; i < _length; i++) {
            for (int j = 0; j < _length; j++) {
                _grid[i][j] = board0.get(sqNum(i + 1, j + 1));
            }
        }
    }

    @Override
    void clear(int N) {
        // FIXME
        _grid = new Square[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                _grid[i][j] = Square.INITIAL;
            }
        }
    }

    @Override
    void copy(Board board) {
        // FIXME
        for (int i = 0; i < _length; i++) {
            for (int j = 0; j < _length; j++) {
                _grid[i][j] = board.get(sqNum(i + 1, j + 1));
            }
        }
        
    }

    /** Copy the contents of BOARD into me, without modifying my undo
     *  history.  Assumes BOARD and I have the same size. */
    private void internalCopy(MutableBoard board) {
        // FIXME
        for (int i = 0; i < _length; i++) {
            for (int j = 0; j < _length; j++) {
                _grid[i][j] = board.get(sqNum(i + 1, j + 1));
            }
        }
    }

    @Override
    int size() {
        return _length;
    }

    @Override
    Square get(int n) {
        int gridR = row(n) - 1;
        int gridC = col(n) - 1;
        return _grid[gridR][gridC];
    }

    @Override
    int numOfSide(Side side) {
        if (side == WHITE) {
            return numWhite;
        } else if (side == RED) {
            return numRed;
        } else if (side == BLUE) {
            return numBlue;
        } else {
            throw new Error("Invalid side");
        }
    }

    @Override
    int numPieces() {
        return numPieces;
    }

    @Override
    void addSpot(Side player, int r, int c) {
        // FIXME
        
        history.push(this);
        _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() + 1);
        if (_grid[r - 1][c - 1].getSpots() > neighbors(r, c)) {
            overfull(player, r, c);
        }
        announce();
    }
    
    void overfull(Side player, int r, int c) {
        if (sqNum(r, c) == 0) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 2);
            addSpot(player, r, c + 1);
            addSpot(player, r + 1, c);
        } else if (sqNum(r, c) == _length * _length - 1) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 2);
            addSpot(player, r, c - 1);
            addSpot(player, r - 1, c);
        } else if (r == _length && c == 1) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 2);
            addSpot(player, r, c + 1);
            addSpot(player, r - 1, c);
        } else if (r == 1 && c == _length) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 2);
            addSpot(player, r, c - 1);
            addSpot(player, r + 1, c);
        } else if (c == 1) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 3);
            addSpot(player, r + 1, c);
            addSpot(player, r - 1, c);
            addSpot(player, r, c + 1);
        } else if (r == 1) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 3);
            addSpot(player, r, c + 1);
            addSpot(player, r, c - 1);
            addSpot(player, r + 1, c);
        } else if (c == _length) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 3);
            addSpot(player, r - 1, c);
            addSpot(player, r + 1, c);
            addSpot(player, r, c - 1);
        } else if (r == _length) {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 3);
            addSpot(player, r, c + 1);
            addSpot(player, r, c - 1);
            addSpot(player, r - 1, c);
        } else {
            _grid[r - 1][c - 1] = Square.square(player, _grid[r - 1][c - 1].getSpots() - 4);
            addSpot(player, r - 1, c);
            addSpot(player, r, c - 1);
            addSpot(player, r + 1, c);
            addSpot(player, r, c + 1);
        }
    }

    @Override
    void addSpot(Side player, int n) {
        // FIXME
        addSpot(player, row(n), col(n));
        announce();
    }

    @Override
    void set(int r, int c, int num, Side player) {
        internalSet(sqNum(r, c), square(player, num));
    }

    @Override
    void set(int n, int num, Side player) {
        internalSet(n, square(player, num));
        announce();
    }

    @Override
    void undo() {
        if (history.empty()) {
            return;
        }
        MutableBoard prevBoard = history.pop();
    }

    /** Record the beginning of a move in the undo history. */
    private void markUndo() {
        // FIXME
    }

    /** Set the contents of the square with index IND to SQ. Update counts
     *  of numbers of squares of each color.  */
    private void internalSet(int ind, Square sq) {
        // FIXME
        int gridR = row(ind) - 1;
        int gridC = col(ind) - 1;
        if (_grid[gridR][gridC].getSide() == Side.WHITE) {
            if (sq.getSide() == Side.RED) {
                numRed += 1;
                numWhite -= 1;
            } else if (sq.getSide() == Side.BLUE) {
                numBlue += 1;
                numWhite -= 1;
            }
        } else if (_grid[gridR][gridC].getSide() == Side.RED) {
            if (sq.getSide() == Side.BLUE) {
                numRed -= 1;
                numBlue += 1;
            }
        } else if (_grid[gridR][gridC].getSide() == Side.BLUE) {
            if (sq.getSide() == Side.RED) {
                numRed += 1;
                numBlue -= 1;
            }
        }
        _grid[gridR][gridC] = sq;

    }

    /** Notify all Observers of a change. */
    private void announce() {
        setChanged();
        notifyObservers();
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof MutableBoard)) {
            return obj.equals(this);
        } else {
            // REPLACE WITH SOLUTION
            return false;
        }
    }

    @Override
    public int hashCode() {
        // REPLACE WITH SOLUTION.  RETURN A NUMBER THAT IS THE SAME FOR BOARDS
        // WITH IDENTICAL CONTENTS (IT NEED NOT BE DIFFERENT IF THE BOARDS
        // DIFFER.)  THE CURRENT STATEMENT WORKS, BUT IS NOT PARTICULARLY
        // EFFICIENT.
        return 0;
    }
    
    /** Board to which all operations delegated. */
    private Square[][] _grid;
    private int _length;
    private int numRed;
    private int numBlue;
    private int numWhite;
    private int numPieces;
    private Stack<MutableBoard> history;

}
